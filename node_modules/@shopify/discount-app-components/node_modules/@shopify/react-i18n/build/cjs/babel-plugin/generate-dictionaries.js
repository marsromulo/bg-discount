'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');
var path = require('path');
var fs = require('fs-extra');
var cloneDeep = require('lodash.clonedeep');
var merge = require('lodash.merge');
var stripJsonComments = require('strip-json-comments');
var shared = require('./shared.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var cloneDeep__default = /*#__PURE__*/_interopDefaultLegacy(cloneDeep);
var merge__default = /*#__PURE__*/_interopDefaultLegacy(merge);
var stripJsonComments__default = /*#__PURE__*/_interopDefaultLegacy(stripJsonComments);

function generateTranslationDictionaries(_x) {
  return _generateTranslationDictionaries.apply(this, arguments);
}

function _generateTranslationDictionaries() {
  _generateTranslationDictionaries = _rollupPluginBabelHelpers.asyncToGenerator(function* (locales, {
    fallbackLocale = shared.DEFAULT_FALLBACK_LOCALE,
    rootDir = process.cwd()
  } = {}) {
    if (!locales || locales.length === 0) {
      throw new Error('generateTranslationDictionary must be called with at least one locale.');
    }

    const translationBuckets = shared.findTranslationBuckets(rootDir);
    yield Promise.all(Object.entries(translationBuckets).map( /*#__PURE__*/function () {
      var _ref = _rollupPluginBabelHelpers.asyncToGenerator(function* ([translationsDir, translationFilePaths]) {
        const fallbackTranslations = yield readLocaleTranslations(fallbackLocale, translationFilePaths);
        const dictionary = yield locales.reduce( /*#__PURE__*/function () {
          var _ref2 = _rollupPluginBabelHelpers.asyncToGenerator(function* (accPromise, locale) {
            const localeTranslations = yield readLocaleTranslations(locale, translationFilePaths);
            const acc = yield accPromise;
            acc[locale] = merge__default["default"](cloneDeep__default["default"](fallbackTranslations), localeTranslations);
            return acc;
          });

          return function (_x5, _x6) {
            return _ref2.apply(this, arguments);
          };
        }(), {});
        const contentStr = JSON.stringify(dictionary); // Writing the content out as a JSON.parse-wrapped string seems
        // counter-intuitive, but browsers can parse this faster than they
        // can parse JavaScript ‾\_(ツ)_/‾
        // https://www.youtube.com/watch?v=ff4fgQxPaO0

        yield fs__default["default"].writeFile(path.join(translationsDir, 'index.js'), `export default JSON.parse(${JSON.stringify(contentStr)})`);
      });

      return function (_x4) {
        return _ref.apply(this, arguments);
      };
    }()));
  });
  return _generateTranslationDictionaries.apply(this, arguments);
}

function readLocaleTranslations(_x2, _x3) {
  return _readLocaleTranslations.apply(this, arguments);
}

function _readLocaleTranslations() {
  _readLocaleTranslations = _rollupPluginBabelHelpers.asyncToGenerator(function* (locale, translationFilePaths) {
    const translationPath = translationFilePaths.find(filePath => filePath.endsWith(`/${locale}.json`));
    return translationPath ? JSON.parse(stripJsonComments__default["default"](yield fs__default["default"].readFile(translationPath, 'utf-8'))) : {};
  });
  return _readLocaleTranslations.apply(this, arguments);
}

exports.generateTranslationDictionaries = generateTranslationDictionaries;
