import { asyncToGenerator as _asyncToGenerator } from '../_virtual/_rollupPluginBabelHelpers.mjs';
import { join } from 'path';
import fs from 'fs-extra';
import cloneDeep from 'lodash.clonedeep';
import merge from 'lodash.merge';
import stripJsonComments from 'strip-json-comments';
import { DEFAULT_FALLBACK_LOCALE, findTranslationBuckets } from './shared.mjs';

function generateTranslationDictionaries(_x) {
  return _generateTranslationDictionaries.apply(this, arguments);
}

function _generateTranslationDictionaries() {
  _generateTranslationDictionaries = _asyncToGenerator(function* (locales, {
    fallbackLocale = DEFAULT_FALLBACK_LOCALE,
    rootDir = process.cwd()
  } = {}) {
    if (!locales || locales.length === 0) {
      throw new Error('generateTranslationDictionary must be called with at least one locale.');
    }

    const translationBuckets = findTranslationBuckets(rootDir);
    yield Promise.all(Object.entries(translationBuckets).map( /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* ([translationsDir, translationFilePaths]) {
        const fallbackTranslations = yield readLocaleTranslations(fallbackLocale, translationFilePaths);
        const dictionary = yield locales.reduce( /*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator(function* (accPromise, locale) {
            const localeTranslations = yield readLocaleTranslations(locale, translationFilePaths);
            const acc = yield accPromise;
            acc[locale] = merge(cloneDeep(fallbackTranslations), localeTranslations);
            return acc;
          });

          return function (_x5, _x6) {
            return _ref2.apply(this, arguments);
          };
        }(), {});
        const contentStr = JSON.stringify(dictionary); // Writing the content out as a JSON.parse-wrapped string seems
        // counter-intuitive, but browsers can parse this faster than they
        // can parse JavaScript ‾\_(ツ)_/‾
        // https://www.youtube.com/watch?v=ff4fgQxPaO0

        yield fs.writeFile(join(translationsDir, 'index.js'), `export default JSON.parse(${JSON.stringify(contentStr)})`);
      });

      return function (_x4) {
        return _ref.apply(this, arguments);
      };
    }()));
  });
  return _generateTranslationDictionaries.apply(this, arguments);
}

function readLocaleTranslations(_x2, _x3) {
  return _readLocaleTranslations.apply(this, arguments);
}

function _readLocaleTranslations() {
  _readLocaleTranslations = _asyncToGenerator(function* (locale, translationFilePaths) {
    const translationPath = translationFilePaths.find(filePath => filePath.endsWith(`/${locale}.json`));
    return translationPath ? JSON.parse(stripJsonComments(yield fs.readFile(translationPath, 'utf-8'))) : {};
  });
  return _readLocaleTranslations.apply(this, arguments);
}

export { generateTranslationDictionaries };
