'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');

class EffectManager {
  get finished() {
    return this.effects.length === 0;
  }

  constructor({
    include = true
  } = {}) {
    this.include = void 0;
    this.effects = [];
    this.kinds = new Set();
    this.include = include;
  }

  reset() {
    this.effects = [];
    this.kinds = new Set();
  }

  add(effect, kind) {
    if (kind != null) {
      this.kinds.add(kind);
    }

    if (effect == null || typeof effect !== 'object' || !('then' in effect)) {
      return;
    }

    this.effects.push(effect);
  }

  resolve() {
    var _this = this;

    return _rollupPluginBabelHelpers.asyncToGenerator(function* () {
      yield Promise.all(_this.effects);
    })();
  }

  betweenEachPass(pass) {
    var _this2 = this;

    return _rollupPluginBabelHelpers.asyncToGenerator(function* () {
      yield Promise.all([..._this2.kinds].map(kind => typeof kind.betweenEachPass === 'function' ? kind.betweenEachPass(pass) : Promise.resolve()));
    })();
  }

  afterEachPass(pass) {
    var _this3 = this;

    return _rollupPluginBabelHelpers.asyncToGenerator(function* () {
      const results = yield Promise.all([..._this3.kinds].map(kind => typeof kind.afterEachPass === 'function' ? kind.afterEachPass(pass) : Promise.resolve()));
      return results.every(result => result !== false);
    })();
  }

  shouldPerform(kind) {
    const {
      include
    } = this;

    if (!include) {
      return false;
    }

    return include === true || kind != null && include.includes(kind.id);
  }

}

exports.EffectManager = EffectManager;
